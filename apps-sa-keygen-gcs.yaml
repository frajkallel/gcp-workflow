main:
  params: [args]
  steps:
  - init:
      assign:
        - ProjectId: ${args.ProjectId}
        - serviceAccountName: ${args.serviceAccountName}
        - serviceAccountEmail: ${serviceAccountName+"@"+ProjectId+".iam.gserviceaccount.com"}
        - IamKeyType: "USER_MANAGED"
        - sapcewebhook: ${args.sapcewebhook}
        - BucketName: ${args.BucketName}
  - logArgs:
        call: sys.log
        args:
            text: ${"The provideds args, project:" + ProjectId + ", serviceAccountName:" + serviceAccountName + ", serviceAccountEmail:" + serviceAccountEmail}
            severity: "INFO"
  - getServiceAccount:
      try:
        call: http.get
        args:
          url: ${"https://iam.googleapis.com/v1/projects/"+ProjectId+"/serviceAccounts/"+serviceAccountEmail}
          auth:
            type: OAuth2
        result: serviceAccount
      except:
        as: e
        steps:
            - handledGetSaException:
                switch:
                - condition: ${not("HttpError" in e.tags)}
                  next: connectionProblem
                - condition: ${e.code == 404}
                  next: logServiceAccountNotFound
                - condition: ${e.code == 403}
                  next: authProblem
            - UnhandledGetSaException:
                raise: ${e}
  - logServiceAccountFound:
      call: sys.log
      args:
          text: ${"Service Account Found"}
          severity: "INFO"
  - createKey:
      try:
        call: http.post
        args:
          url: ${"https://iam.googleapis.com/v1/projects/"+ProjectId+"/serviceAccounts/"+serviceAccountEmail+"/keys"}
          auth:
            type: OAuth2
        result: key
      except:
        as: e
        steps:
            - handledCreateKeyException:
                switch:
                - condition: ${not("HttpError" in e.tags)}
                  next: connectionProblem
                - condition: ${e.code == 404}
                  next: urlNotFound
                - condition: ${e.code == 403}
                  next: authProblem
            - UnhandledCreateKeyException:
                raise: ${e}
  - getKeyId:
      assign:
        - keyid: ${text.split(key.body.name, "/")}
  - uploadKey:
      try:
        call: http.post
        args:
          url: ${"https://storage.googleapis.com/upload/storage/v1/b/"+BucketName+"/o?uploadType=media&name="+ProjectId+"-"+serviceAccountName+"-"+keyid[5]+".json"}
          auth:
            type: OAuth2
          body: ${base64.decode(key.body.privateKeyData)}
        result: newKey
      except:
        as: e
        steps:
            - handledAddSecretException:
                switch:
                - condition: ${not("HttpError" in e.tags)}
                  next: connectionProblem
                - condition: ${e.code == 404}
                  next: urlNotFound
                - condition: ${e.code == 403}
                  next: authProblem
            - UnhandledAddSecretException:
                raise: ${e}
  - Notify:
      try:
        call: http.post
        args:
          url: ${sapcewebhook}
          headers:
            Content-Type: "application/json"
          body:
            text: ${"Hello @all,\n A new service account key was generated for "+ serviceAccountEmail +". \n To download it, clic on the url** https://storage.cloud.google.com/"+BucketName+"/"+ProjectId+"-"+serviceAccountName+"-"+keyid[5]+".json\n Best Regards,\n Squad Cloud Team"}
      except:
        as: e
        steps:
            - RaiseErrorNotify:
                raise: ${e}      
  - returnOutput:
      return: "The end"  
  - connectionProblem:
      raise: "Connection problem; check URL"
  - urlNotFound:
      raise: "Sorry, URL wasn't found"
  - authProblem:
      raise: "Authentication error"
  - keyExist:
      raise: "Key Already existe"
  - logServiceAccountNotFound:
      call: sys.log
      args:
          text: "Service Account Not Founded"
          severity: "INFO"
